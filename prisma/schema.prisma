datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
}

generator client {
  provider        = "prisma-client-js"
  //previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
}

model pups {
  pup_id      Int       @id @default(autoincrement())
  // userId      String
  name        String    @db.VarChar(20)
  description String    @db.Text
  pup_image   String    @db.VarChar
  breed       String    @db.VarChar(50)
  sex         Boolean
  pup_status  Boolean
  age         String    @db.VarChar(20)
  price       Decimal   @db.Decimal
  numreviews  Decimal?  @db.Decimal
  createdat   DateTime? @db.Timestamp(6)
  // users       Users?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String  //change to Int if their is an error
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  users Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        Users     @relation(fields: [userId], references: [id], onDelete: Cascade)
}//add field for refresh token //refresh_token String[]

model Users {
  id            String    @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  role          Role  @default(USER)
  image         String?
  password      String
  refreshToken  String?   @unique
  accounts      Account[]
  sessions      Session[]
  // pups          pups[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}  //for email verifications

enum Role {
  USER
  ADMIN
}