generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pups {
  pup_id      Int       @id @default(autoincrement())
  name        String    @db.VarChar(20)
  description String    @db.VarChar(255)
  pup_image   String    @db.VarChar
  breed       String    @db.VarChar(50)
  sex         Boolean
  pup_status  Boolean
  age         String    @db.VarChar(20)
  price       Decimal   @db.Decimal
  numreviews  Decimal?  @db.Decimal
  createdat   DateTime? @db.Timestamp(6)
}


// generator client {
//   provider = "prisma-client-js"
//   //previewFeatures = ["referentialActions"] // You won't need this in Prisma 3.X or higher.
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
//   //shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/migrate-shadow
// }

// model pups {
//   pup_id      Int       @id @default(autoincrement())
//   name        String    @db.VarChar(20)
//   description String    @db.VarChar(255)
//   pup_image   String    @db.VarChar
//   breed       String    @db.VarChar(50)
//   sex         Boolean
//   pup_status  Boolean
//   age         String    @db.VarChar(20)
//   price       Decimal   @db.Decimal
//   numreviews  Decimal?  @db.Decimal
//   createdat   DateTime? @db.Timestamp(6)
// }

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?   @unique
//   emailVerified DateTime?
//   role          Role  @default(USER)
//   image         String?
//   password      String
//   accounts      Account[]
//   sessions      Session[]
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// enum Role {
//   USER
//   ADMIN
// }
